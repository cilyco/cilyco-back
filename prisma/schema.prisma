// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// SEE DOCKERFILE

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres_password@localhost:5432/cilyco"
}

model Resident {
  id            Int         @default(autoincrement()) @id
  nom           String
  prenom        String
  commentaire   String?
  actif         Boolean?    @default(true)
  dateNaissance DateTime
  statut        String?
  adresse       String?

  visite        Visite?
  contrat       Contrat?
  accueil       Accueil?

  contacts      Contact[]
  animations    Animation[]
  constantes    Constante[]
  chambres      Chambre[]
  chutes        Chute[]

  updatedAt DateTime @updatedAt
}

model Chute {
  id            Int     @default(autoincrement()) @id
  lieu          String
  date          DateTime
  commentaire   String

  resident      Resident   @relation(fields: [residentId], references: [id])
  residentId    Int
}

model Chambre {
  id            Int     @default(autoincrement()) @id
  numero        Int
  etage         Int
  actif         Boolean
  cote          String
  commentaires  ChambreCommentaire[]

  resident      Resident   @relation(fields: [residentId], references: [id])
  residentId    Int
}

model ChambreCommentaire {
  id            Int         @default(autoincrement()) @id
  commentaire   String
  chambre       Chambre    @relation(fields: [chambreId], references: [id])
  chambreId     Int
}

model Agent {
  id            Int     @default(autoincrement()) @id
  nom           String
  prenom        String
  commentaire   String?
  actif         Boolean?    @default(false)
  dateNaissance DateTime
  animations    Animation[]
}

model Contact {
  id                Int         @default(autoincrement()) @id
  nom               String
  prenom            String
  actif             Boolean?    @default(false)
  lien              String[]
  sexe              String?
  commentaire       String?
  telephone_1_type  String?
  telephone_1_numero  String?
  telephone_2_type  String?
  telephone_2_numero  String?

  resident      Resident   @relation(fields: [residentId], references: [id])
  residentId    Int

  updatedAt DateTime @updatedAt
}

model Constante {
  id            Int         @default(autoincrement()) @id
  temperature   Float
  tension       Float
  rythme        Int
  resident      Resident    @relation(fields: [residentId], references: [id])
  residentId    Int
}

model Visite {
  id            Int         @default(autoincrement()) @id
  createdAt     DateTime    @default(now())
  date          DateTime

  resident      Resident    @relation(fields: [residentId], references: [id])
  residentId    Int
}

model Contrat {
  id            Int         @default(autoincrement()) @id
  createdAt     DateTime    @default(now())

  resident      Resident    @relation(fields: [residentId], references: [id])
  residentId    Int
}

model Accueil {
  id            Int         @default(autoincrement()) @id
  createdAt     DateTime    @default(now())

  resident      Resident    @relation(fields: [residentId], references: [id])
  residentId    Int
}

model Vehicule {
  id                    Int         @default(autoincrement()) @id
  createdAt             DateTime    @default(now())
  marque                String
  modele                String
  kilometrage           Int
  etat                  String
  immatriculation       String
  commentaire           String
  couleur               String
  vehiculeEvenement     VehiculeEvenement[]
}

model VehiculeEvenement {
  id            Int         @default(autoincrement()) @id
  createdAt     DateTime    @default(now())
  debut         DateTime
  fin           DateTime

  vehicule      Vehicule    @relation(fields: [vehiculeId], references: [id])
  vehiculeId    Int
}

model Animation {
  id                            Int         @default(autoincrement()) @id
  createdAt                     DateTime    @default(now())
  lieu                          String
  debut                         DateTime
  fin                           DateTime
  exterieur                     Boolean
  animateur                     Agent       @relation(fields: [animateurId], references: [id])
  animateurId                   Int
  resident                      Resident    @relation(fields: [residentId], references: [id])
  residentId                    Int
}

model Evenement {
  id            Int         @default(autoincrement()) @id
}